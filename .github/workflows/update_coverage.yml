name: Update rule coverage
on: push

jobs:
  update_coverage:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.COVERAGE_GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: true
        #ref: master
        ref: az/RULEAPI-657-coverage-cron
        path: 'rspec'

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'Install Pipenv'
      run: pip install pipenv

    - name: 'Install coverage script dependencies'
      working-directory: 'rspec/rule_coverage'
      run: |
        pipenv --python python3.9 install

    - name: 'Regenerate coverage information'
      id: gen-coverage
      working-directory: 'rspec/rule_coverage'
      run: |
        # pipenv run python3.9 ./coverage.py batchall
        cp ../frontend/public/covered_rules.json ./
        echo "simulated change" >> ./covered_rules.json
        cp ./covered_rules.json ../frontend/public/covered_rules.json
        if git diff --exit-code --quiet ../frontend/public/covered_rules.json; then
          echo "::set-output name=new_coverage::true"
        else
          echo "::set-output name=new_coverage::false"
        fi

    - name: Cancel if coverage did not change
      if: steps.gen-coverage.outputs.files_changed != 'true'
      uses: andymckay/cancel-action@0.2

    - name: 'Branch out the coverage file'
      if: steps.gen-coverage.outputs.files_changed == 'true'
      working-directory: 'rspec'
      run: |
        git config --global user.email "sonartech@sonarsource.com"
        git config --global user.name "Sonartech"
        git checkout -b "az/test-branch-update-cov"
        git add frontend/public/covered_rules.json
        git commit -m "update coverage information"
        git push -f origin az/test-branch-update-cov

    - name: 'Wait for CI to succeed'
      if: steps.gen-coverage.outputs.files_changed == 'true'
      uses: fountainhead/action-wait-for-check@v1.0.0
      id: wait-for-build
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: tooling_tests
        ref: 'az/test-branch-update-cov'

    - name: Push the updated coverage to master
      if: |
        (steps.gen-coverage.outputs.files_changed == 'true' &&
        steps.wait-for-build.outputs.conclusion == 'success')
      working-directory: 'rspec'
      run: |
        git checkout az/RULEAPI-657-coverage-cron
        git merge az/test-branch-update-cov
        git push origin az/RULEAPI-657-coverage-cron

    - name: Delete branch
      if: steps.gen-coverage.outputs.files_changed == 'true'
      uses: dawidd6/action-delete-branch@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN}}
        branches: az/test-branch-update-cov

    - name: Fail on CI failure
      if: steps.wait-for-build.outputs.conclusion != 'success'
      run: exit 1

    # - name: Notify on slack about the failure
    #   if: ${{ failure() }}
    #   env:
    #     SLACK_API_TOKEN: ${{secrets.SLACK_API_TOKEN }}
    #     INPUT_SLACK_CHANNEL: team-lang-rspec-v2
    #   working-directory: 'rspec/rule_coverage'
    #   run: pipenv run python3.9 notify_failure.py

