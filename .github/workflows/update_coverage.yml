name: Update rule coverage
on: push

jobs:
  update_coverage:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.COVERAGE_GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: true
        #ref: master
        ref: az/RULEAPI-657-coverage-cron
        path: 'rspec'

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'Install Pipenv'
      run: pip install pipenv

    - name: 'Install coverage script dependencies'
      working-directory: 'rspec/rule_coverage'
      run: |
        pipenv --python python3.9 install

#     - name: 'Regenerate coverage information'
#       working-directory: 'rspec/rule_coverage'
#       run: |
#         # pipenv run python3.9 ./coverage.py batchall
#         cp ../frontend/public/covered_rules.json ./
#         echo "simulated change" >> ./covered_rules.json

# # TODO: check if there is any change in the coverage
#     - name: 'Branch out the coverage file'
#       working-directory: 'rspec'
#       run: |
#         git checkout master
#         cp rule_coverage/covered_rules.json frontend/public/covered_rules.json
#         git config --global user.email "sonartech@sonarsource.com"
#         git config --global user.name "Sonartech"
#         git checkout -b "az/test-branch-update-cov"
#         git add frontend/public/covered_rules.json
#         git commit -m "update coverage information"
#         git push -f origin az/test-branch-update-cov

#     - name: 'Wait for CI to succeed'
#       uses: fountainhead/action-wait-for-check@v1.0.0
#       id: wait-for-build
#       with:
#         token: ${{ secrets.GITHUB_TOKEN }}
#         checkName: tooling_tests
#         ref: 'az/test-branch-update-cov'

#     - name: Push the updated coverage to master
#       if: steps.wait-for-build.outputs.conclusion == 'success'
#       working-directory: 'rspec'
#       run: |
#         git checkout az/RULEAPI-657-coverage-cron
#         git merge az/test-branch-update-cov
#         git push origin az/RULEAPI-657-coverage-cron

    - name: Notify on slack about the failure
      #if: steps.wait-for-build.outputs.conclusion != 'success'
      env:
        SLACK_API_TOKEN: ${{secrets.SLACK_API_TOKEN }}
        INPUT_SLACK_CHANNEL: team-lang-cfamily
      working-directory: 'rspec/rule_coverage'
      run: |
        pipenv run python3.9 notify_failure.py
        exit 1

